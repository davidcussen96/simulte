//
// Generated file, do not edit! Created by nedtool 5.4 from stack/sci/Sci.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __SCI_M_H
#define __SCI_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>stack/sci/Sci.msg:17</tt> by nedtool.
 * <pre>
 * packet Sci
 * {
 *     \@customize(true);
 * 
 *     unsigned int priority;
 *     unsigned int resourceRes;
 *     unsigned int freqResource;
 *     unsigned int timeGap;
 *     unsigned int mcs;
 *     unsigned int retrans;
 *     unsigned int resInfo;
 * }
 * </pre>
 *
 * Sci_Base is only useful if it gets subclassed, and Sci is derived from it.
 * The minimum code to be written for Sci is the following:
 *
 * <pre>
 * class Sci : public Sci_Base
 * {
 *   private:
 *     void copy(const Sci& other) { ... }

 *   public:
 *     Sci(const char *name=nullptr, short kind=0) : Sci_Base(name,kind) {}
 *     Sci(const Sci& other) : Sci_Base(other) {copy(other);}
 *     Sci& operator=(const Sci& other) {if (this==&other) return *this; Sci_Base::operator=(other); copy(other); return *this;}
 *     virtual Sci *dup() const override {return new Sci(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Sci_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Sci)
 * </pre>
 */
class Sci_Base : public ::omnetpp::cPacket
{
  protected:
    unsigned int priority;
    unsigned int resourceRes;
    unsigned int freqResource;
    unsigned int timeGap;
    unsigned int mcs;
    unsigned int retrans;
    unsigned int resInfo;

  private:
    void copy(const Sci_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Sci_Base&);
    // make constructors protected to avoid instantiation
    Sci_Base(const char *name=nullptr, short kind=0);
    Sci_Base(const Sci_Base& other);
    // make assignment operator protected to force the user override it
    Sci_Base& operator=(const Sci_Base& other);

  public:
    virtual ~Sci_Base();
    virtual Sci_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class Sci");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getPriority() const;
    virtual void setPriority(unsigned int priority);
    virtual unsigned int getResourceRes() const;
    virtual void setResourceRes(unsigned int resourceRes);
    virtual unsigned int getFreqResource() const;
    virtual void setFreqResource(unsigned int freqResource);
    virtual unsigned int getTimeGap() const;
    virtual void setTimeGap(unsigned int timeGap);
    virtual unsigned int getMcs() const;
    virtual void setMcs(unsigned int mcs);
    virtual unsigned int getRetrans() const;
    virtual void setRetrans(unsigned int retrans);
    virtual unsigned int getResInfo() const;
    virtual void setResInfo(unsigned int resInfo);
};


#endif // ifndef __SCI_M_H
